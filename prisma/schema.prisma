generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  productId     String         @id @default(cuid())
  name          String
  slug          String         @unique
  description   String         @db.VarChar(10000)
  smallDescription String
  weightRange   String
  priceRange    String
  productCategoryId String
  productSubCategoryId String
  stock         Int
  orderCount    Int @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  wishlist      UserWishlist[]
  ProductImages ProductImage[]
  CartItem      CartItem[]
  productReviews ProductReview[]
  productCategory ProductCategory @relation(fields: [productCategoryId], references: [productCategoryId])
  productSubCategory ProductSubCategory @relation(fields: [productSubCategoryId], references: [productSubCategoryId])

  @@index([name])
  @@index([productCategoryId])
  @@index([productSubCategoryId])
  @@map("products")
}

model ProductReview {
  productReviewId String @id @default(cuid())
  productId String
  userId String
  review String
  rating Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product Product @relation(fields: [productId], references: [productId], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("productreviews")
}

model ProductCategory {
  productCategoryId String @id @default(cuid())
  name String @unique
  slug String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productSubCategories ProductSubCategory[]
  products Product[]

  @@index([name])
  @@map("productcategories")
}

model ProductSubCategory {
  productSubCategoryId String @id @default(cuid())
  name String
  slug String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productCategoryId String
  productCategory ProductCategory @relation(fields: [productCategoryId], references: [productCategoryId])
  products Product[]

  @@index([name])
  @@map("productsubcategories")
}

model ProductImage {
  productImageId  String  @id @default(cuid())
  productId       String
  imageUrl        String
  publicUrl       String
  product         Product @relation(fields: [productId], references: [productId], onDelete: Cascade)


  @@map("productimages")
}

model Cart {
  cartId    String     @id @default(cuid())
  items     CartItem[]
  userId    String?
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  totalPrice Int       @default(0)
  order     Order?
  inquiry   Inquiry?

  @@map("carts")
}


model CartItem {
  cartItemId String  @id @default(cuid())
  productId  String
  product    Product @relation(fields: [productId], references: [productId], onDelete: Cascade)
  quantity   Int
  customization String
  cartId     String
  cart       Cart    @relation(fields: [cartId], references: [cartId], onDelete: Cascade)

  @@map("cartitems")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String     @id @default(cuid())
  username      String?
  name          String?
  password      String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  phoneNumber   String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  scope         String?    @default("member")
  wishlist      UserWishlist[]
  productReviews ProductReview[]
  accounts      Account[]
  sessions      Session[]
  cart          Cart[]
  orders        Order[]
  invoices      Invoice[]
  addresses     Addresses[]
  inquiry       Inquiry[]

  @@map("users")
}

model UserWishlist {
  userWishlistId String @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [productId], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId, productId])
  @@map("userwishlists")
}


model Addresses {
  addressId    String    @id @default(cuid())
  userId       String
  provinceId   String
  cityId       String
  addressTo    String
  fullAddress  String
  isActive     Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  city         Cities    @relation(fields: [cityId], references: [cityId])
  province     Provinces @relation(fields: [provinceId], references: [provinceId])

  @@map("addresses")
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String   @unique
  token      String   @unique
  expires    DateTime

  @@map("verificationtokens")
}

model Provinces {
  provinceId   String      @id @default(cuid())
  name         String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  cities       Cities[]
  addresses    Addresses[]

  @@map("provinces")
}

model Cities {
  cityId     String      @id @default(cuid())
  name       String
  provinceId String
  province   Provinces   @relation(fields: [provinceId], references: [provinceId])
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  addresses  Addresses[]

  @@map("cities")
}

model Inquiry {
  inquiryId    String   @id @default(cuid())
  userId       String   
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartId       String   @unique
  cart         Cart     @relation(fields: [cartId], references: [cartId])
  status       String
  adminReply   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("inquiries")
}

model Order {
  orderId         String    @id @default(cuid())
  userId          String
  cartId          String    @unique
  status          String   
  shippingStatus  String
  shippingAddress String
  courierCode     String
  courierService  String
  shippingCost    Int
  totalWeight     Int      
  totalPrice      Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  cart            Cart      @relation(fields: [cartId], references: [cartId])
  invoice         Invoice?
  payments        Payment[]
  paymentDetails  PaymentDetails?

  @@index([userId, status])
  @@map("orders")
}

model PaymentDetails {
  paymentDetailsId String @id @default(cuid())
  orderId          String @unique
  snapToken        String?
  snapRedirectUrl  String?
  order            Order @relation(fields: [orderId], references: [orderId])

  @@map("payment_details")
}

model Invoice {
  invoiceId       String   @id @default(cuid())
  orderId         String   @unique
  userId          String
  name            String
  phoneNumber     String
  totalPrice      Int
  weight          Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  order           Order   @relation(fields: [orderId], references: [orderId])
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("invoices")
}

model Payment {
  paymentId     String   @id @default(cuid())
  orderId       String
  amount        Int
  paymentMethod String
  transactionId String?
  status        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  order         Order  @relation(fields: [orderId], references: [orderId])

  @@index([orderId, status])
  @@map("payments")
}

model Courier {
  courierId String @id @default(cuid())
  code      String
  name      String
  services  Json

  @@map("couriers")
}